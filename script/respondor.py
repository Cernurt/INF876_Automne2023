"""
Load node id and coordinates from pycgrc file generated by https://github.com/AndGem/OsmToRoadGraph to PostGIS database
Read list of coordinates and get nearest node id using index-based KNN https://postgis.net/workshops/postgis-intro/knn.html#index-based-knn

@Author yohanes.gultom@gmail.com
"""

import configparser
import psycopg2
import sys
import csv
from io import StringIO

config = configparser.ConfigParser()
config.read('config.ini')

"""
Example of config.ini:

[respondor]
host = localhost
user = postgres
passwd = postgres
db = respondor
"""

class get_db_connection:
    def __init__(self, dbconf: dict):
        self.host = dbconf['host']
        self.database = dbconf['db']
        self.user = dbconf['user']
        self.password = dbconf['passwd']

    def __enter__(self):
        self.conn = psycopg2.connect(
            host=self.host,
            database=self.database,
            user=self.user,
            password=self.password)
        self.cur = self.conn.cursor()
        return self.cur

    def __exit__(self, type, value, traceback):
        self.conn.commit()
        self.cur.close()
        self.conn.close()

def load_locations(table_name, file_path):
    # read nodes to string io
    s = StringIO()
    total_nodes = None
    count_nodes = 0
    with open(file_path) as f:
        count = 0
        for line in f:
            if count == 7:
                total_nodes = int(line)
            elif count > 8:
                # start reading nodes
                node_id, lat, lon = line.split()
                values = (node_id, f'POINT({lat} {lon})')
                s.write('\t'.join(values)+'\n')
                count_nodes += 1            
                if count_nodes >= total_nodes:
                    break
            count += 1
    s.seek(0)        

    # create table and copy data
    with get_db_connection(config['respondor']) as cur:
        cur.execute(f'DROP TABLE IF EXISTS {table_name}')
        cur.execute(f"""
        CREATE TABLE {table_name} (
            id integer NOT NULL,
            coords geometry,
            CONSTRAINT {table_name}_pkey PRIMARY KEY (id)
        )
        """
        )
        cur.execute(f'CREATE INDEX {table_name}_coords_index ON {table_name} USING GIST(coords)')
        cur.copy_from(s, table_name, columns=('id', 'coords'))

    print(count_nodes)

def get_nearest_node_ids(table_name, input_path):
    # read input
    locations = []
    with open(input_path) as f:
        reader = csv.reader(f)
        for row in reader:
            if len(row) >= 3:
                name = row[0]
                lat = row[1]
                lon = row[2]
                locations.append((name, lat, lon))

    # find nearest location then rewrite input
    with get_db_connection(config['respondor']) as cur, open(input_path, 'w+') as f:
        writer = csv.writer(f)
        for row in locations:
            name, lat, lon = row
            sql = f"SELECT id FROM {table_name} ORDER BY coords <-> 'POINT({lat} {lon})'::geometry ASC LIMIT 1;"
            cur.execute(sql)
            res = cur.fetchone() 
            node_id = res[0]
            writer.writerow((name, lat, lon, node_id))



if __name__ == '__main__':
    # load data to database
    load_locations('locations_jakarta', '/mnt/data/Downloads/jakarta.pycgr/jakarta.pycgrc')
    load_locations('locations_lombok', '/mnt/data/Downloads/lombok-island.pycgr/lombok-island.pycgrc')

    # find nearest node_id
    get_nearest_node_ids('locations_jakarta', '/mnt/data/Downloads/jakarta_locations.csv')
    get_nearest_node_ids('locations_lombok', '/mnt/data/Downloads/lombok_locations.csv')